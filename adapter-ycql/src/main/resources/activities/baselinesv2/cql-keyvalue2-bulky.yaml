min_version: "5.17.1"

description: |
  A workload with only text keys and text values which range in size from 50K to 150K.
  The CQL Key-Value workload demonstrates the simplest possible schema with payload data. This is useful for measuring
  system capacity most directly in terms of raw operations. As a reference point, it provides some insight around types of
  workloads that are constrained around messaging, threading, and tasking, rather than bulk throughput.
  During preload, all keys are set with a value. During the main phase of the workload, random keys from the known
  population are replaced with new values which never repeat. During the main phase, random partitions are selected for
  upsert, with row values never repeating.

scenarios:
  default:
    schema: run driver=cql tags==block:schema threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto
  astra:
    schema: run driver=cql tags==block:schema-astra threads==1 cycles==UNDEF
    rampup: run driver=cql tags==block:rampup cycles===TEMPLATE(rampup-cycles,10000000) threads=auto
    main: run driver=cql tags==block:"main.*" cycles===TEMPLATE(main-cycles,10000000) threads=auto

bindings:
  seq_key: Mod(TEMPLATE(keycount,1000000000)); ToString();
  # write a random size of text from 50K to 150K, avg 100K, sampled from a static image of text in memory that is 16MB
  seq_value: >-
    Hash();
    Mod(TEMPLATE(valuecount,1000000000));
    CharBufImage('A-Za-z0-9 _|/',16000000,HashRange(TEMPLATE(mintext,50000)TEMPLATE(addzeroes,),TEMPLATE(maxtext,150000)TEMPLATE(addzeroes,)));
    ToString();
  rw_key: TEMPLATE(keydist,Uniform(0,1000000000)); ToString() -> String
  rw_value: Hash(); TEMPLATE(valdist,Uniform(0,1000000000)); CharBufImage('A-Za-z0-9 _|/',16000000,HashRange(TEMPLATE(mintext,50000)TEMPLATE(addzeros,),TEMPLATE(maxtext,150000)TEMPLATE(addzeros,))); ToString();

blocks:
  schema:
    params:
      prepared: false
    ops:
      create-keyspace: |
        create keyspace if not exists TEMPLATE(keyspace,baselines)
        WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 'TEMPLATE(rf,1)'}
        AND durable_writes = true;
      create-table: |
        create table if not exists TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (
        key text,
         value text,
         PRIMARY KEY (key)
        );
    schema-astra:
      params:
        prepared: false
      statements:
        create-table: |
          create table if not exists TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (
          key text,
           value text,
           PRIMARY KEY (key)
          );
  rampup:
    params:
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    ops:
      rampup-insert: |
        insert into TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue)
        (key, value)
        values ({seq_key},{seq_value});
  verify:
    params:
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
    ops:
      verify-select: |
        select * from TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) where key={seq_key};
      verify-fields: key->seq_key, value->seq_value
  main-read:
    params:
      ratio: 5
      cl: TEMPLATE(read_cl,LOCAL_QUORUM)
    statements:
      main-select: |
        select * from TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) where key={rw_key};
  main-write:
    params:
      ratio: 5
      cl: TEMPLATE(write_cl,LOCAL_QUORUM)
    statements:
      main-insert: |
        insert into TEMPLATE(keyspace,baselines).TEMPLATE(table,keyvalue) (key, value) values ({rw_key}, {rw_value});
